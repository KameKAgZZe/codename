package codename.team.cinemabooking.controller;

import codename.team.cinemabooking.model.Genre;
import codename.team.cinemabooking.model.Movie;
import codename.team.cinemabooking.service.MovieService;
import codename.team.cinemabooking.validator.MovieValidator;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Set;
import java.util.UUID;

@Controller
public class AdminContoller {
    @Value("${upload.path}")
    private String uploadPath;
    @Autowired
    private MovieService movieService;
    @Autowired
    private MovieValidator movieValidator;

    // Which is auto-generated by Spring, we will use it to handle the data
    @RequestMapping(value = "/admin", method = RequestMethod.GET)
    public String admin(Model admin) {
        return "admin";
    }

    @RequestMapping(value = "/addfilm", method = RequestMethod.GET)
    public String addfilm(Model model) {
        model.addAttribute("genres", movieService.genreList());
        model.addAttribute("movieForm", new Movie());
        return "addfilm";
    }

    @PostMapping(value = "/addfilm", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public String addfilm(@ModelAttribute("movieForm") Movie movieForm, @RequestParam("posterFile") MultipartFile file, BindingResult bindingResult, Model model) throws IOException {
        movieValidator.validate(movieForm, bindingResult);

        //todo: save poster to database
        movieForm.setPoster(UUID.randomUUID().toString() + "_" + file.getOriginalFilename());
        Files.createDirectories(Paths.get(uploadPath));
        File filePath = new File(uploadPath, movieForm.getPoster());

        file.transferTo(filePath);
        if (bindingResult.hasErrors()) {
            return "addfilm";
        }
        movieService.save(movieForm);
        return "redirect:/complete";

    }

    @RequestMapping(value = "/complete", method = RequestMethod.GET)
    public String complete(Model model, String movie_name) {
        model.addAttribute("movies", movieService.movieList());
        return "complete";
    }

    @GetMapping("/movie/{movie}")
    public String movieEditForm(@PathVariable Movie movie, Model model) {
        model.addAttribute("movie", movie);
        model.addAttribute("genres", movieService.genreList());
        return "movieEdit";
    }

    @PostMapping(value = "/movie/{movie}", consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)
    public String saveMovie(@PathVariable Movie movie, ChangedMovie changedMovie, Model model) {
        changedMovie.applyChanges(movie);
        movieService.save(movie);
        model.addAttribute("movie", movie);
        model.addAttribute("genres", movieService.genreList());
        return "movieEdit";
    }
}
